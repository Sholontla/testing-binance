anyio==3.6.1
APScheduler==3.9.1
attrs==21.4.0
autobahn==22.6.1
Automat==20.2.0
binance-futures==0.0.1
binance-futures-connector==3.1.1
certifi==2022.6.15
cffi==1.15.1
chardet==5.0.0
charset-normalizer==2.1.0
click==8.1.3
colorama==0.4.5
constantly==15.1.0
cryptography==37.0.4
Faker==13.15.0
fastapi==0.79.0
greenlet==1.1.2
h11==0.13.0
hyperlink==21.0.0
idna==3.3
incremental==21.3.0
Jinja2==3.1.2
MarkupSafe==2.1.1
numpy==1.23.1
pandas==1.4.3
psycopg2==2.9.3
pyasn1==0.4.8
pyasn1-modules==0.2.8
pycparser==2.21
pydantic==1.9.1
pyOpenSSL==22.0.0
python-dateutil==2.8.2
python-multipart==0.0.5
pytz==2022.1
requests==2.28.1
service-identity==21.1.0
six==1.16.0
sniffio==1.2.0
SQLAlchemy==1.4.39
starlette==0.19.1
txaio==22.2.1
typing_extensions==4.3.0
tzlocal==2.1
urllib3==1.26.10
uvicorn==0.18.2
websocket-client==1.3.3
websockets==10.3
zope.interface==5.4.0
gunicorn


import os
from pathlib import Path

import pandas as pd

from dotenv import load_dotenv

from pydantic import ValidationError

from fastapi import HTTPException, APIRouter


from sqlalchemy import create_engine, MetaData
from sqlalchemy.orm import declarative_base, sessionmaker


migrations = APIRouter(tags=["SimpleMigrations"])


DeclarativeBase = declarative_base()


# Specify the path to the .env file relative to the current script's directory
env_path = Path("/app/config/local") / ".env"

load_dotenv(dotenv_path=env_path)  # Load the .env file from the specified path

POSTGRE_DRIVER_URL = os.getenv('POSTGRE_DRIVER_URL')
POSTGRE_USER = os.getenv('POSTGRE_USER')
POSTGRE_PASSWORD = os.getenv('POSTGRE_PASSWORD')
POSTGRE_HOST = os.getenv('POSTGRE_HOST')
POSTGRE_PORT = os.getenv('POSTGRE_PORT')
POSTGRE_DB_NAME = os.getenv('POSTGRE_DB_NAME')


class Migrate:
    def __init__(self):
        self.engine = create_engine(
            f"{POSTGRE_DRIVER_URL}://{POSTGRE_USER}:{POSTGRE_PASSWORD}@{POSTGRE_HOST}:{POSTGRE_PORT}/{POSTGRE_DB_NAME}", echo=False)
        self.Session = sessionmaker(bind=self.engine)
        self.metadata = MetaData()

    def migrations(self):
        DeclarativeBase.metadata.create_all(self.engine)
        return self.sql_read_tables().to_dict()

    def sql_read_tables(self):
        self.metadata.reflect(bind=self.engine)
        table_names = self.metadata.tables.keys()
        db_nombres_df = pd.DataFrame(table_names, columns=["db_nombres"])
        return db_nombres_df


@migrations.get("/migrations")
def register_suppliers_handler():
    migrate = Migrate()

    try:
        migrate.migrations()
        return {"migration": "migrations successfully registered", "tables": migrate.migrations()}

    except ValidationError as e:
        raise HTTPException(status_code=400, detail="Invalid payload")
